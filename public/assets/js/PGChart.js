// Generated by CoffeeScript 1.6.3
(function() {
  window.PGChart = (function() {
    PGChart.prototype.container = 'body';

    PGChart.prototype.margin = {
      top: 50,
      right: 40,
      bottom: 50,
      left: 75
    };

    PGChart.prototype.width = 800;

    PGChart.prototype.height = 600;

    PGChart.prototype.dataset = [];

    PGChart.prototype.currDataset = [];

    PGChart.prototype.axes = {
      x: 'ValueX',
      y: 'ValueY'
    };

    PGChart.prototype.axis = {
      x: null,
      y: null
    };

    PGChart.prototype.scale = {
      x: 1,
      y: 1
    };

    PGChart.prototype.chart = null;

    PGChart.prototype.limit = 1000;

    PGChart.prototype.drag = true;

    function PGChart(container, margin, dataset, axes, limit) {
      if (!!container) {
        this.container = container;
      }
      if (!!margin) {
        this.margin = margin;
      }
      this.width = $(container).width() - this.margin.left - this.margin.right;
      this.height = $(container).height() - this.margin.top - this.margin.bottom;
      if (!!dataset) {
        this.dataset = dataset;
      }
      if (!!axes) {
        this.axes = axes;
      }
      if (!!limit) {
        this.limit = limit;
      }
      this.initChart();
    }

    PGChart.prototype.processDataset = function() {
      var i, inc, ind, _i, _ref, _results,
        _this = this;
      if (this.dataset.length > this.limit) {
        inc = this.dataset.length / this.limit;
        ind = 0;
        this.currDataset = [];
        _results = [];
        for (i = _i = 0, _ref = this.dataset.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function(i) {
            if (Math.floor(ind) === i) {
              _this.currDataset.push(_this.dataset[i]);
              return ind += inc;
            }
          })(i));
        }
        return _results;
      } else {
        return this.currDataset = this.dataset;
      }
    };

    PGChart.prototype.setScales = function() {
      var _this = this;
      this.scale.x = (function() {
        switch (DataCon.patterns[this.axes.x]) {
          case 'date':
            return d3.time.scale();
          default:
            return d3.scale.linear();
        }
      }).call(this);
      this.scale.x.domain(d3.extent(this.currDataset, function(d) {
        return d[0];
      })).range([0.01 * this.width, 0.98 * this.width]);
      this.scale.y = (function() {
        switch (DataCon.patterns[this.axes.y]) {
          case 'date':
            return d3.time.scale();
          default:
            return d3.scale.linear();
        }
      }).call(this);
      this.scale.y.domain([
        d3.min(this.currDataset, function(d) {
          return d[1];
        }), d3.max(this.currDataset, function(d) {
          return d[1];
        })
      ]).range([0.98 * this.height, 0.01 * this.height]);
      this.axis.x = d3.svg.axis().scale(this.scale.x).orient("bottom").ticks(5);
      this.axis.x.tickFormat(function(d) {
        switch (DataCon.patterns[_this.axes.x]) {
          case 'date':
            return formatDate(d);
          case 'percent':
            return "" + d + "%";
          default:
            return d;
        }
      });
      this.axis.y = d3.svg.axis().scale(this.scale.y).orient("left");
      return this.axis.y.tickFormat(function(d) {
        switch (DataCon.patterns[_this.axes.y]) {
          case 'date':
            return formatDate(d);
          case 'percent':
            return "" + d + "%";
          default:
            return d;
        }
      });
    };

    PGChart.prototype.drawChart = function() {
      var svg,
        _this = this;
      svg = d3.select(this.container).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom);
      this.chart = svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      this.chart.append("clipPath").attr('id', 'chart-area').append('rect').attr('x', 0).attr('y', 0).attr('width', this.width).attr('height', this.height);
      return svg.call(d3.behavior.zoom().scaleExtent([1, 10]).on('zoom', function() {
        var s, t;
        t = d3.event.translate;
        s = d3.event.scale;
        if (_this.drag) {
          return svg.attr('transform', "translate(" + t + ")scale(" + s + ")");
        }
      }));
    };

    PGChart.prototype.drawAxes = function() {
      this.chart.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.axis.x).append("text").attr("id", "xLabel").style("text-anchor", "end").text(this.axes.x).attr("transform", "translate(" + this.width + ",40)");
      return this.chart.append("g").attr("class", "y axis").call(this.axis.y).append("text").attr("id", "yLabel").style("text-anchor", "middle").text(this.axes.y).attr("transform", "translate(0,-30)");
    };

    PGChart.prototype.initChart = function() {
      this.processDataset();
      this.setScales();
      this.drawChart();
      return this.drawAxes();
    };

    PGChart.prototype.updateAxes = function() {
      this.chart.select('.x.axis').transition().duration(1000).call(this.axis.x).select("#xLabel").text(this.axes.x);
      return this.chart.select('.y.axis').transition().duration(1000).call(this.axis.y).select("#yLabel").text(this.axes.y);
    };

    PGChart.prototype.updateChart = function(dataset, axes) {
      if (!!dataset) {
        this.dataset = dataset;
      }
      if (!!axes) {
        this.axes = axes;
      }
      this.processDataset();
      this.setScales();
      return this.updateAxes();
    };

    PGChart.prototype.newPointDialog = function(x, y) {
      var point, pointDialog;
      point = new PGChartPoint({
        id: 1
      });
      console.log(point);
      pointDialog = new PGChartPointView({
        model: point,
        id: "pointDialog" + (point.get('id'))
      });
      return $(this.container).append(pointDialog.render().$el);
    };

    return PGChart;

  })();

}).call(this);
