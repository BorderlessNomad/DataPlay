// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.PGPanChart = (function(_super) {
    __extends(PGPanChart, _super);

    PGPanChart.prototype.maxEl = 100;

    PGPanChart.prototype.xStart = 0;

    PGPanChart.prototype.sortedDataset = [];

    PGPanChart.prototype.xPanRef = null;

    function PGPanChart(container, margin, dataset, axes, limit, maxEl) {
      if (!!maxEl) {
        this.maxEl = maxEl;
      }
      this.maxEl = Math.min(this.maxEl, dataset.length);
      PGPanChart.__super__.constructor.call(this, container, margin, dataset, axes, limit);
    }

    PGPanChart.prototype.setCurrDataset = function(xStart) {
      if (!!xStart) {
        this.xStart = xStart;
      }
      this.currDataset = this.sortedDataset.slice(this.xStart * this.maxEl, (this.xStart + 1) * this.maxEl);
      return console.log(this.currDataset);
    };

    PGPanChart.prototype.processDataset = function() {
      this.sortedDataset = quicksort(this.dataset);
      return this.setCurrDataset(Math.floor((this.dataset.length / this.maxEl) / 2));
    };

    PGPanChart.prototype.drawLines = function() {
      var _this = this;
      this.line = d3.svg.line().x(function(d) {
        return _this.scale.x(d[0]);
      }).y(function(d) {
        return _this.scale.y(d[1]);
      });
      return this.chart.append('g').attr('id', 'lines1').attr('clip-path', 'url(#chart-area)').selectAll("path").data(this.currDataset).enter().append("path").attr("class", "line").attr("d", function(d) {
        return _this.line(_this.currDataset);
      }).style("stroke", "#335577");
    };

    PGPanChart.prototype.drawCircles = function() {
      var circles1,
        _this = this;
      return circles1 = this.chart.append('g').attr('id', 'circles1').attr('clip-path', 'url(#chart-area)').selectAll(".circle1").data(this.currDataset).enter().append("circle").attr("class", "circle1").attr("cx", function(d) {
        return _this.scale.x(d[0]);
      }).attr("cy", function(d) {
        return _this.scale.y(d[1]);
      }).attr("r", 5).attr('fill', '#882244').on('mouseover', function(d) {
        return d3.select(this).transition().duration(500).attr('r', 50).attr('fill', '#aa3377');
      }).on('mouseout', function(d) {
        return d3.select(this).transition().duration(1000).attr('r', 5).attr('fill', '#882244');
      }).on('click', function(d) {
        return _this.getPointData(1, _this.scale.x(d[0]), _this.scale.y(d[1]));
      }).append('title').text(function(d) {
        return "" + _this.axes.x + ": " + d[0] + "\n" + _this.axes.y + ": " + d[1];
      });
    };

    PGPanChart.prototype.setChartEvents = function() {
      var _this = this;
      $(this.container).on('mousedown', function(e) {
        console.log("drag started at " + e.clientX);
        return _this.xPanRef = e.clientX;
      });
      $(this.container).on('mousemove', function(e) {
        var xStart;
        if (_this.xPanRef) {
          console.log("dragged at " + e.clientX);
          xStart = Math.max(0, Math.floor(_this.maxEl * (e.clientX - _this.xPanRef) / _this.width));
          console.log("New start at " + xStart);
          _this.setCurrDataset(xStart);
          _this.setScales();
          return _this.updateAxes();
        }
      });
      return $(this.container).on('mouseup', function(e) {
        console.log("drag ended at " + e.clientX);
        return _this.xPanRef = null;
      });
    };

    PGPanChart.prototype.initChart = function() {
      PGPanChart.__super__.initChart.apply(this, arguments);
      this.drawLines();
      return this.setChartEvents();
    };

    PGPanChart.prototype.updateLines = function() {
      var _this = this;
      return this.chart.selectAll(".line").data(this.currDataset).transition().duration(1000).attr("d", function(d) {
        return _this.line(_this.currDataset);
      });
    };

    PGPanChart.prototype.updateCircles = function() {
      var _this = this;
      return this.chart.selectAll(".circle1").data(this.currDataset).transition().duration(1000).attr("cx", function(d) {
        return _this.scale.x(d[0]);
      }).attr("cy", function(d) {
        return _this.scale.y(d[1]);
      }).select('title').text(function(d) {
        return "" + _this.axes.x + ": " + d[0] + "\n" + _this.axes.y + ": " + d[1];
      });
    };

    PGPanChart.prototype.updateChart = function(dataset, axes) {
      PGPanChart.__super__.updateChart.apply(this, arguments);
      this.updateLines();
      return this.updateCircles();
    };

    return PGPanChart;

  })(PGChart);

}).call(this);
