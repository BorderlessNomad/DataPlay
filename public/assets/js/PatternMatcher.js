// Generated by CoffeeScript 1.6.3
(function() {
  window.PatternMatcher = (function() {
    var _this = this;

    function PatternMatcher() {}

    PatternMatcher.entities = [
      {
        name: 'date',
        handlers: [
          {
            pattern: /^(((19|20)?\d\d)[- \/.])?((0)?([1-9])|1[012])[- \/.]((0)?([1-9])|[12][0-9]|3[01])$/,
            parse: function(m) {
              return PatternMatcher.parse(m);
            }
          }, {
            pattern: /^(0[1-9]|1[012])([- \/.])(0[1-9]|[12][0-9]|3[01])\2(19|20)\d\d$/,
            parse: function(src, s) {
              var vals;
              vals = src.split(s);
              return "" + vals[2] + "-" + vals[0] + "-" + vals[1];
            }
          }, {
            pattern: /^(0[1-9]|[12][0-9]|3[01])([- \/.])(0[1-9]|1[012])\2(19|20)\d\d$/,
            parse: function(src, s) {
              var vals;
              vals = src.split(s);
              return "" + vals[2] + "-" + vals[1] + "-" + vals[0];
            }
          }, {
            pattern: /^([1-9]|[12][0-9]|3[01])([- \/.])([1-9]|1[012])\2(19|20)\d\d$/,
            parse: function(src, s) {
              var vals;
              vals = src.split(s);
              return "" + vals[2] + "-0" + vals[1] + "-0" + vals[0];
            }
          }, {
            pattern: /^([1-9]|[12][0-9]|3[01])([- \/.])(0[1-9]|1[012])\2(19|20)\d\d$/,
            parse: function(src, s) {
              var vals;
              vals = src.split(s);
              return "" + vals[2] + "-" + vals[1] + "-0" + vals[0];
            }
          }, {
            pattern: /^(0[1-9]|[12][0-9]|3[01])([- \/.])([1-9]|1[012])\2(19|20)\d\d$/,
            parse: function(src, s) {
              var vals;
              vals = src.split(s);
              return "" + vals[2] + "-0" + vals[1] + "-" + vals[0];
            }
          }, {
            pattern: /^(0[1-9]|[12][0-9]|3[01])([- \/.])(0[1-9]|1[012])\2\d\d$/,
            parse: function(src, s) {
              var cy, vals, y, year;
              vals = src.split(s);
              cy = new Date().getYear();
              y = parseInt("#20{vals[2]}");
              year = cy > y ? y : "#19{vals[2]}";
              return "" + year + "-" + vals[1] + "-" + vals[0];
            }
          }, {
            pattern: /^\d\d([- \/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])$/,
            parse: function(src, s) {
              var cy, vals, y, year;
              vals = src.split(s);
              cy = new Date().getYear();
              y = parseInt("#20{vals[0]}");
              year = cy > y ? y : "#19{vals[0]}";
              return "" + year + "-" + vals[1] + "-" + vals[2];
            }
          }, {
            pattern: /^(0[1-9]|1[012])([- \/.])(0[1-9]|[12][0-9]|3[01])\2\d\d$/,
            parse: function(src, s) {
              var cy, vals, y, year;
              vals = src.split(s);
              cy = new Date().getYear();
              y = parseInt("#20{vals[2]}");
              year = cy > y ? y : "#19{vals[2]}";
              return "" + year + "-" + vals[0] + "-" + vals[1];
            }
          }, {
            pattern: /^([1-9]|[12][0-9]|3[01])([- \/.])([1-9]|1[012])\2\d\d$/,
            parse: function(src, s) {
              var cy, vals, y, year;
              vals = src.split(s);
              cy = new Date().getYear();
              y = parseInt("#20{vals[2]}");
              year = cy > y ? y : "#19{vals[2]}";
              return "" + year + "-0" + vals[1] + "-0" + vals[0];
            }
          }, {
            pattern: /^\d\d([- \/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])$/,
            parse: function(src, s) {
              var cy, vals, y, year;
              vals = src.split(s);
              cy = new Date().getYear();
              y = parseInt("#20{vals[0]}");
              year = cy > y ? y : "#19{vals[0]}";
              return "" + year + "-" + vals[1] + "-" + vals[2];
            }
          }, {
            pattern: /^(0[1-9]|1[012])([- \/.])(0[1-9]|[12][0-9]|3[01])\2\d\d$/,
            parse: function(src, s) {
              var cy, vals, y, year;
              vals = src.split(s);
              cy = new Date().getYear();
              y = parseInt("#20{vals[2]}");
              year = cy > y ? y : "#19{vals[2]}";
              return "" + year + "-" + vals[0] + "-" + vals[1];
            }
          }, {
            pattern: /^(0[1-9]|[12][0-9]|3[01])([- \/.])(0[1-9]|1[012])\2\d\d$/,
            parse: function(src, s) {
              var vals, year;
              vals = src.split(s);
              year = new Date().getYear();
              return "" + year + "-" + vals[1] + "-" + vals[0];
            }
          }, {
            pattern: /^\d\d([- \/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])$/,
            parse: function(src, s) {
              var vals, year;
              vals = src.split(s);
              year = new Date().getYear();
              return "" + year + "-" + vals[1] + "-" + vals[2];
            }
          }, {
            pattern: /^(0[1-9]|1[012])([- \/.])(0[1-9]|[12][0-9]|3[01])\2\d\d$/,
            parse: function(src, s) {
              var vals, year;
              vals = src.split(s);
              year = new Date().getYear();
              return "" + year + "-" + vals[0] + "-" + vals[1];
            }
          }
        ]
      }, {
        name: 'email',
        handlers: [
          {
            pattern: /\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b/i
          }
        ]
      }
    ];

    PatternMatcher.getPattern = function(src) {
      var entity, _i, _len, _ref, _results;
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push((function(entity) {
          var handler, _j, _len1, _ref1, _results1;
          _ref1 = entity.handlers;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            handler = _ref1[_j];
            _results1.push((function(handler) {
              var match;
              match = handler.pattern.exec(src);
              if (match) {
                console.log(match);
                console.log(entity.name);
                return console.log(handler.parse(match));
              }
            })(handler));
          }
          return _results1;
        })(entity));
      }
      return _results;
    };

    PatternMatcher.parse = function(m) {
      var dd, mm, yyyy;
      if (m[3]) {
        yyyy = m[2];
      } else {
        yyyy = parseInt(m[2]) < 30 ? "20" + m[2] : "19" + m[2];
      }
      mm = m[5] || !m[6] ? m[4] : "0" + m[4];
      dd = m[8] || !m[9] ? m[7] : "0" + m[7];
      return "" + yyyy + "-" + mm + "-" + dd;
    };

    return PatternMatcher;

  }).call(this);

}).call(this);
