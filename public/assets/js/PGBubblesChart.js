// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.PGBubblesChart = (function(_super) {
    __extends(PGBubblesChart, _super);

    PGBubblesChart.prototype.node = null;

    PGBubblesChart.prototype.label = null;

    PGBubblesChart.prototype.data = [];

    PGBubblesChart.prototype.maxRadius = 20;

    PGBubblesChart.prototype.rScale = null;

    PGBubblesChart.prototype.collisionPadding = 4;

    PGBubblesChart.prototype.minCollisionRadius = 12;

    PGBubblesChart.prototype.jitter = 0.245;

    PGBubblesChart.prototype.force = null;

    PGBubblesChart.prototype.drag = true;

    function PGBubblesChart(container, margin, dataset, axes, limit) {
      this.mouseout = __bind(this.mouseout, this);
      this.mouseover = __bind(this.mouseover, this);
      this.hashchange = __bind(this.hashchange, this);
      this.click = __bind(this.click, this);
      this.connectEvents = __bind(this.connectEvents, this);
      this.tick = __bind(this.tick, this);
      this.collide = __bind(this.collide, this);
      this.gravity = __bind(this.gravity, this);
      PGBubblesChart.__super__.constructor.call(this, container, margin, dataset, axes, limit);
      this.data = dataset;
      this.rScale = d3.scale.sqrt().range([0, this.maxRadius]);
      this.force = d3.layout.force().gravity(0).charge(0).size([this.width, this.height]).on("tick", this.tick);
      this.initChart();
    }

    PGBubblesChart.prototype.rValue = function(d) {
      return parseInt(d.count);
    };

    PGBubblesChart.prototype.idValue = function(d) {
      return d.name;
    };

    PGBubblesChart.prototype.textValue = function(d) {
      return d.name;
    };

    PGBubblesChart.prototype.gravity = function(alpha) {
      var ax, ay, cx, cy;
      cx = this.width / 2;
      cy = this.height / 2;
      ax = alpha / 8;
      ay = alpha;
      return function(d) {
        d.x += (cx - d.x) * ax;
        return d.y += (cy - d.y) * ay;
      };
    };

    PGBubblesChart.prototype.collide = function(jitter) {
      var that;
      that = this;
      return function(d) {
        return that.data.forEach(function(d2) {
          var distance, minDistance, moveX, moveY, x, y;
          if (d !== d2) {
            x = d.x - d2.x;
            y = d.y - d2.y;
            distance = Math.sqrt(x * x + y * y);
            minDistance = d.forceR + d2.forceR + that.collisionPadding;
            if (distance < minDistance) {
              distance = (distance - minDistance) / distance * jitter;
              moveX = x * distance;
              moveY = y * distance;
              d.x -= moveX;
              d.y -= moveY;
              d2.x += moveX;
              return d2.y += moveY;
            }
          }
        });
      };
    };

    PGBubblesChart.prototype.transformData = function(rawData) {
      rawData.forEach(function(d) {
        d.count = parseInt(d.count);
        return rawData.sort(function() {
          return 0.5 - Math.random();
        });
      });
      return rawData;
    };

    PGBubblesChart.prototype.tick = function(e) {
      var dampenedAlpha;
      dampenedAlpha = e.alpha * 0.1;
      this.node.each(this.gravity(dampenedAlpha));
      this.node.each(this.collide(this.jitter));
      this.node.attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
      return this.label.attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
    };

    PGBubblesChart.prototype.connectEvents = function(d) {
      var _this = this;
      d.on("click", this.click);
      d.on("mouseover", this.mouseover);
      d.on("mouseout", this.mouseout);
      return d.on("mousedown", function() {
        return _this.drag = false;
      });
    };

    PGBubblesChart.prototype.clear = function() {
      return location.replace("#");
    };

    PGBubblesChart.prototype.click = function(d) {
      location.replace("#" + encodeURIComponent(this.idValue(d)));
      return d3.event.preventDefault();
    };

    PGBubblesChart.prototype.hashchange = function() {
      var id;
      id = decodeURIComponent(location.hash.substring(1)).trim();
      if (id) {
        return this.updateActive(id);
      }
    };

    PGBubblesChart.prototype.updateActive = function(id) {
      var _this = this;
      return this.node.classed("bubble-selected", function(d) {
        return id === _this.idValue(d);
      });
    };

    PGBubblesChart.prototype.mouseover = function(d) {
      return this.node.classed("bubble-hover", function(p) {
        return p === d;
      });
    };

    PGBubblesChart.prototype.mouseout = function(d) {
      return this.node.classed("bubble-hover", false);
    };

    PGBubblesChart.prototype.chart = function(selection) {
      var that,
        _this = this;
      d3.select('body').on("mouseup", function() {
        return _this.drag = true;
      });
      that = this;
      return selection.each(function(rawData) {
        var data, maxDomainValue, svg, svgEnter;
        if (!rawData.length) {
          return;
        }
        data = that.transformData(rawData);
        that.data = data;
        maxDomainValue = d3.max(data, function(d) {
          return that.rValue(d);
        });
        that.rScale.domain([0, maxDomainValue]);
        svg = d3.select(this).selectAll("svg").data([data]);
        svgEnter = svg.enter().append("svg");
        svg.attr("width", that.width + that.margin.left + that.margin.right);
        svg.attr("height", that.height + that.margin.top + that.margin.bottom);
        svg.call(d3.behavior.zoom().scaleExtent([1, 10]).on('zoom', function() {
          var s, t;
          t = d3.event.translate;
          s = d3.event.scale;
          if (that.drag) {
            return svg.attr('transform', "translate(" + t + ")scale(" + s + ")");
          }
        }));
        svgEnter.append("clipPath").attr('id', 'chart-area').append('rect').attr('x', 0).attr('y', 0).attr('width', that.width).attr('height', that.height);
        that.node = svgEnter.append("g").attr("id", "bubble-nodes").attr('clip-path', 'url(#chart-area)').attr("transform", "translate(" + that.margin.left + "," + that.margin.top + ")");
        that.node.append("rect").attr("id", "bubble-background").attr("width", that.width).attr("height", that.height).on("click", that.clear);
        that.label = svgEnter.append("g").attr("id", "bubble-labels").attr('clip-path', 'url(#chart-area)').attr("transform", "translate(" + that.margin.left + "," + that.margin.top + ")");
        that.update();
        that.hashchange();
        return d3.select(window).on("hashchange", that.hashchange);
      });
    };

    PGBubblesChart.prototype.initChart = function() {
      return this.chart(d3.select(this.container).datum(this.data));
    };

    PGBubblesChart.prototype.update = function() {
      var _this = this;
      this.data.forEach(function(d, i) {
        return d.forceR = Math.max(_this.minCollisionRadius, _this.rScale(_this.rValue(d)));
      });
      this.force.nodes(this.data).start();
      this.updateNodes();
      return this.updateLabels();
    };

    PGBubblesChart.prototype.updateNodes = function() {
      var _this = this;
      this.node = this.node.selectAll(".bubble-node").data(this.data, function(d) {
        return _this.idValue(d);
      });
      this.node.exit().remove();
      return this.node.enter().append("a").attr("class", "bubble-node").attr("xlink:href", function(d) {
        return "#" + (encodeURIComponent(_this.idValue(d)));
      }).call(this.connectEvents).call(this.force.drag).append("circle").attr("r", function(d) {
        return _this.rScale(_this.rValue(d));
      });
    };

    PGBubblesChart.prototype.updateLabels = function() {
      var _this = this;
      this.label = this.label.selectAll(".bubble-label").data(this.data, function(d) {
        return _this.idValue(d);
      });
      this.label.exit().remove();
      return this.label.enter().append("text").attr("class", "bubble-label").text(function(d) {
        return "" + (_this.textValue(d));
      }).attr("font-size", "10px").attr("fill", "#cccccc").attr('text-anchor', 'end').attr('dx', -5).attr('dy', -3).append("tspan").text(function(d) {
        return "" + (_this.rValue(d));
      }).attr("font-family", "sans-serif").attr("font-size", "12px").attr("fill", "#dddddd").attr('text-anchor', 'end').attr('dx', -30).attr('dy', 10);
    };

    PGBubblesChart.prototype.updateChart = function(dataset, axes) {
      PGBubblesChart.__super__.updateChart.call(this, dataset, axes);
      this.data = dataset;
      return this.update();
    };

    return PGBubblesChart;

  })(PGChart);

}).call(this);
