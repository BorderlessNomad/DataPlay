// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.PGBarsChart = (function(_super) {
    __extends(PGBarsChart, _super);

    function PGBarsChart() {
      _ref = PGBarsChart.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PGBarsChart.prototype.bars = null;

    PGBarsChart.prototype.padding = 20;

    PGBarsChart.prototype.setScales = function() {
      var d, m, _i, _len, _ref1,
        _this = this;
      m = [];
      _ref1 = this.currDataset;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        d = _ref1[_i];
        m.push(d[0]);
      }
      this.scale.x = d3.scale.ordinal().domain(m).rangeBands([0.01 * this.width, 0.98 * this.width]);
      this.scale.y = (function() {
        switch (DataCon.patterns[this.axes.y]) {
          case 'date':
            return d3.time.scale();
          default:
            return d3.scale.linear();
        }
      }).call(this);
      this.scale.y.domain([
        d3.min(this.currDataset, function(d) {
          return d[1];
        }), d3.max(this.currDataset, function(d) {
          return d[1];
        })
      ]).range([0.98 * this.height, 0.01 * this.height]);
      this.axis.x = d3.svg.axis().scale(this.scale.x).orient("bottom").ticks(5);
      this.axis.x.tickFormat(function(d) {
        return d;
      });
      this.axis.y = d3.svg.axis().scale(this.scale.y).orient("left");
      return this.axis.y.tickFormat(function(d) {
        switch (DataCon.patterns[_this.axes.y]) {
          case 'date':
            return formatDate(d);
          case 'percent':
            return "" + d + "%";
          default:
            return d;
        }
      });
    };

    PGBarsChart.prototype.createBars = function() {
      return this.bars = this.chart.append('g').attr('id', 'bars').attr('clip-path', 'url(#chart-area)');
    };

    PGBarsChart.prototype.initChart = function() {
      PGBarsChart.__super__.initChart.apply(this, arguments);
      this.createBars();
      return this.renderBars();
    };

    PGBarsChart.prototype.renderBars = function() {
      var bars,
        _this = this;
      bars = this.bars.selectAll('rect.bar').data(this.currDataset);
      bars.enter().append("rect").attr("class", "bar").on('click', function(d) {
        return _this.newPointDialog(d[0], d[1]);
      });
      bars.exit().transition().duration(1000).attr("x", -100).remove();
      return bars.transition().duration(1000).attr("x", function(d) {
        return _this.scale.x(d[0]);
      }).attr("y", function(d) {
        return _this.scale.y(d[1]);
      }).attr("width", function(d) {
        return Math.floor((_this.width / _this.currDataset.length) - _this.padding / _this.currDataset.length);
      }).attr("height", function(d) {
        return _this.height - _this.scale.y(d[1]);
      });
    };

    PGBarsChart.prototype.updateChart = function(dataset, axes) {
      PGBarsChart.__super__.updateChart.call(this, dataset, axes);
      return this.renderLines();
    };

    PGBarsChart.prototype.newPointDialog = function(x, y) {
      var point, pointDialog;
      point = new PGChartPoint({
        id: 1
      });
      console.log(point);
      pointDialog = new PGChartPointView({
        model: point,
        id: "pointDialog" + (point.get('id'))
      });
      return $(this.container).append(pointDialog.render().$el);
    };

    return PGBarsChart;

  })(PGChart);

}).call(this);
