// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.PGLinesChart = (function(_super) {
    __extends(PGLinesChart, _super);

    function PGLinesChart() {
      _ref = PGLinesChart.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PGLinesChart.prototype.drawLines = function() {
      var that,
        _this = this;
      that = this;
      this.line = d3.svg.line().interpolate("cardinal").x(function(d) {
        return _this.scale.x(d[0]);
      }).y(function(d) {
        return _this.scale.y(d[1]);
      });
      return this.chart.append('g').attr('id', 'line01').attr('clip-path', 'url(#chart-area)').append("path").attr("class", "line").attr("d", this.line(this.currDataset)).on('mouseover', function() {
        var m;
        $('.circle').remove();
        m = d3.mouse(this);
        console.log("" + (that.scale.x.invert(m[0])) + "," + (that.scale.y.invert(m[1])));
        return that.drawCircle(m[0], m[1]);
      });
    };

    PGLinesChart.prototype.initChart = function() {
      PGLinesChart.__super__.initChart.apply(this, arguments);
      return this.drawLines();
    };

    PGLinesChart.prototype.updateLines = function() {
      return this.chart.selectAll(".line").transition().duration(1000).attr("d", this.line(this.currDataset));
    };

    PGLinesChart.prototype.updateChart = function(dataset, axes) {
      PGLinesChart.__super__.updateChart.call(this, dataset, axes);
      return this.updateLines();
    };

    PGLinesChart.prototype.drawCircle = function(x, y) {
      var _this = this;
      return this.chart.append("circle").attr("class", "circle").attr("cx", x).attr("cy", y).attr("r", 5).attr('fill', '#882244').on('click', function(d) {
        return _this.newPointDialog(x, y);
      }).append('title').text(function(d) {
        return "" + _this.axes.x + ": " + (_this.scale.x.invert(x)) + "\n" + _this.axes.y + ": " + (_this.scale.y.invert(y));
      });
    };

    PGLinesChart.prototype.newPointDialog = function(x, y) {
      var point, pointDialog;
      point = new PGChartPoint({
        id: 1
      });
      console.log(point);
      pointDialog = new PGChartPointView({
        model: point,
        id: "pointDialog" + (point.get('id'))
      });
      return $(this.container).append(pointDialog.render().$el);
    };

    return PGLinesChart;

  })(PGChart);

}).call(this);
