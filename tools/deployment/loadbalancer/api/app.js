// Generated by CoffeeScript 1.8.0
var app, bodyParser, compileTemplate, errorhandler, exec, express, fs, jsonFile, path, port, proxy, puts, router, server, swig, sys;

express = require("express");

bodyParser = require("body-parser");

errorhandler = require("errorhandler");

jsonFile = require("json-file-plus");

path = require("path");

fs = require("fs");

swig = require("swig");

sys = require("sys");

exec = require("child_process").exec;

proxy = path.join(process.cwd(), 'proxy.json');

app = express();

app.use(bodyParser.urlencoded({
  extended: true
}));

app.use(bodyParser.json());

app.use(errorhandler());

port = process.env.PORT || 1937;

puts = function(error, stdout, stderr) {
  return sys.puts(stdout);
};

compileTemplate = function(data) {
  var key, output, timestamp, value, _i, _j, _len, _len1, _ref, _ref1;
  _ref = data.gamification;
  for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
    value = _ref[key];
    data.gamification[key].id = "gamification" + (key + 1);
  }
  _ref1 = data.compute;
  for (key = _j = 0, _len1 = _ref1.length; _j < _len1; key = ++_j) {
    value = _ref1[key];
    data.compute[key].id = "compute" + (key + 1);
  }
  timestamp = Date.now();
  output = swig.renderFile("haproxy.cfg.template", {
    generatedOn: timestamp,
    gamification: data.gamification,
    compute: data.compute
  });
  return fs.writeFile("haproxy.cfg", output, function(err) {
    if (err) {
      return err;
    }
    console.log("Successfully generated haproxy.cfg on " + (new Date(timestamp)));
    console.log("Copy /etc/haproxy/haproxy.cfg to /etc/haproxy/haproxy.cfg." + timestamp);
    exec("cp -rf /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg." + timestamp, puts);
    console.log("Replace old config file [Use some force if needed]");
    exec("cp -rf haproxy.cfg /etc/haproxy/haproxy.cfg", puts);
    console.log("Reload HAProxy");
    return exec("service haproxy reload", puts);
  });
};

router = express.Router();

router.route("/").get(function(req, res) {
  return jsonFile(proxy, function(err, file) {
    console.log(err);
    if (err) {
      return res.status(500).json({
        error: "Error while reading file."
      });
    }
    return res.json(file.data);
  });
});

router.route("/:type").get(function(req, res) {
  return jsonFile(proxy, function(err, file) {
    var _ref, _ref1;
    if (err) {
      return res.status(500).json({
        error: "Error while reading file."
      });
    }
    if (!(((_ref = req.params) != null ? (_ref1 = _ref.type) != null ? _ref1.length : void 0 : void 0) > 0)) {
      return res.status(400).json({
        error: "No Type to remove."
      });
    }
    if (file.data[req.params.type] != null) {
      return res.json(file.data[req.params.type]);
    } else {
      return res.status(400).json({
        error: "Invalid Type specified."
      });
    }
  });
});

router.route("/:type").post(function(req, res) {
  return jsonFile(proxy, function(err, file) {
    var key, timestamp, value, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
    if (err) {
      return res.status(500).json({
        error: "Error while reading file."
      });
    }
    if (!(((_ref = req.params) != null ? (_ref1 = _ref.type) != null ? _ref1.length : void 0 : void 0) > 0)) {
      return res.status(400).json({
        error: "No Type to specified."
      });
    }
    if (file.data[req.params.type] == null) {
      return res.status(400).json({
        error: "Invalid Type specified."
      });
    }
    console.log(req.body);
    if (!(((_ref2 = req.body) != null ? (_ref3 = _ref2.ip) != null ? _ref3.length : void 0 : void 0) > 0)) {
      return res.status(400).json({
        error: "No IP to add."
      });
    }
    _ref4 = file.data[req.params.type];
    for (key = _i = 0, _len = _ref4.length; _i < _len; key = ++_i) {
      value = _ref4[key];
      if (value.endpoint === req.body.ip) {
        return res.status(409).json({
          error: "IP already exists!"
        });
      }
    }
    timestamp = Date.now();
    file.data[req.params.type].push({
      endpoint: req.body.ip,
      timestamp: timestamp
    });
    return file.save().then((function() {
      console.log("[" + (new Date(timestamp)) + "] added new endpoint:", req.body.ip);
      compileTemplate(file.data);
      return res.json(file.data[req.params.type]);
    }), function(err) {
      return res.status(500).json({
        error: "Error while saving file."
      });
    });
  });
});

router.route("/:type/:ip")["delete"](function(req, res) {
  return jsonFile(proxy, function(err, file) {
    var index, key, timestamp, value, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
    if (err) {
      return res.status(500).json({
        error: "Error while reading file."
      });
    }
    if (!(((_ref = req.params) != null ? (_ref1 = _ref.type) != null ? _ref1.length : void 0 : void 0) > 0)) {
      return res.status(400).json({
        error: "No Type to specified."
      });
    }
    if (file.data[req.params.type] == null) {
      return res.status(400).json({
        error: "Invalid Type specified."
      });
    }
    if (!(((_ref2 = req.params) != null ? (_ref3 = _ref2.ip) != null ? _ref3.length : void 0 : void 0) > 0)) {
      return res.status(400).json({
        error: "No IP to remove."
      });
    }
    _ref4 = file.data[req.params.type];
    for (key = _i = 0, _len = _ref4.length; _i < _len; key = ++_i) {
      value = _ref4[key];
      if (value.endpoint === req.params.ip) {
        index = key;
        break;
      }
    }
    if (index == null) {
      return res.status(404).json({
        error: "No such IP found!"
      });
    }
    timestamp = Date.now();
    file.data[req.params.type].splice(index, 1);
    return file.save().then((function() {
      console.log("[" + (new Date(timestamp)) + "] removed endpoint:", req.params.ip);
      compileTemplate(file.data);
      return res.json(file.data[req.params.type]);
    }), function(err) {
      return res.status(500).json({
        error: "Error while saving file"
      });
    });
  });
});

app.use('/', router);

server = app.listen(port, function() {
  var host;
  host = server.address().address;
  port = server.address().port;
  return console.log("Express server listening on http://%s:%d in '%s' mode", host, port, app.settings.env);
});
