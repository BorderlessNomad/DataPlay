// Generated by CoffeeScript 1.9.1
var app, bodyParser, cluster, compileTemplate, datakey, errorhandler, exec, express, fs, jsonFile, path, port, puts, router, server, swig, sys;

express = require("express");

bodyParser = require("body-parser");

errorhandler = require("errorhandler");

jsonFile = require("json-file-plus");

path = require("path");

fs = require("fs");

swig = require("swig");

sys = require("sys");

exec = require("child_process").exec;

cluster = path.join(process.cwd(), "cluster.json");

datakey = "cluster";

require("console-stamp")(console, "[yyyy-mm-dd HH:MM:ss.l o]");

app = express();

app.use(bodyParser.urlencoded({
  extended: true
}));

app.use(bodyParser.json());

app.use(errorhandler());

port = process.env.PORT || 1937;

puts = function(error, stdout, stderr) {
  return sys.puts(stdout);
};

compileTemplate = function(data) {
  var i, key, len, output, ref, timestamp, value;
  ref = data.cluster;
  for (key = i = 0, len = ref.length; i < len; key = ++i) {
    value = ref[key];
    data.cluster[key].id = key;
  }
  console.log("[Compile] - Prepare -", data);
  timestamp = Date.now();
  output = swig.renderFile("pgpool.conf.template", {
    generatedOn: timestamp,
    cluster: data.cluster
  });
  return fs.writeFile("pgpool.conf", output, function(err) {
    if (err) {
      console.log("[API] - GET - Error", err);
    }
    if (err) {
      return err;
    }
    return console.log("[Compile] - Generated -", "pgpool.conf on " + (new Date(timestamp)));

    /*
    		exec "cp -rf /etc/pgpool-II-94/pgpool.conf /etc/pgpool-II-94/pgpool.conf.#{timestamp}", puts
    		console.log "[Copy] - Backup -", "/etc/pgpool-II-94/pgpool.conf => /etc/pgpool-II-94/pgpool.conf.#{timestamp}"
    
    		exec "cp -rf pgpool.conf /etc/pgpool-II-94/pgpool.conf", puts
    		console.log "[Copy] - Replace -", "pgpool.conf => /etc/pgpool-II-94/pgpool.conf"
    
    		console.log "[Service] - Reload -", "Start"
    		exec "systemctl restart pgpool-II-94", puts
    		console.log "[Service] - Reload -", "Success"
     */
  });
};

router = express.Router();

router.route("/").get(function(req, res) {
  return jsonFile(cluster, function(err, file) {
    if (err) {
      console.log("[API] - GET - Error", err);
    }
    if (err) {
      return res.status(500).json({
        error: "Error while reading file."
      });
    }
    console.log("[API] - GET -", req.headers['x-forwarded-for'] || req.connection.remoteAddress, "-", req.body.ip);
    return res.json(file.data);
  });
});

router.route("/").post(function(req, res) {
  return jsonFile(cluster, function(err, file) {
    var i, key, len, ref, ref1, ref2, timestamp, value;
    if (err) {
      console.log("[API] - POST - Error", err);
    }
    if (err) {
      return res.status(500).json({
        error: "Error while reading file."
      });
    }
    if (!(((ref = req.body) != null ? (ref1 = ref.ip) != null ? ref1.length : void 0 : void 0) > 0)) {
      return res.status(400).json({
        error: "No IP to add."
      });
    }
    console.log("[API] - POST -", req.headers['x-forwarded-for'] || req.connection.remoteAddress, "-", req.body.ip);
    ref2 = file.data[datakey];
    for (key = i = 0, len = ref2.length; i < len; key = ++i) {
      value = ref2[key];
      if (value.endpoint === req.body.ip) {
        return res.status(409).json({
          error: "IP already exists!"
        });
      }
    }
    timestamp = Date.now();
    file.data[datakey].push({
      endpoint: req.body.ip,
      timestamp: timestamp
    });
    return file.save().then((function() {
      console.log("[API] - POST - Success", req.body.ip);
      compileTemplate(file.data);
      return res.json(file.data[datakey]);
    }), function(err) {
      console.log("[API] - POST - Error", err);
      return res.status(500).json({
        error: "Error while saving file."
      });
    });
  });
});

router.route("/:ip")["delete"](function(req, res) {
  return jsonFile(cluster, function(err, file) {
    var i, index, key, len, ref, ref1, ref2, timestamp, value;
    if (err) {
      console.log("[API] - DELETE - Error", err);
    }
    if (err) {
      return res.status(500).json({
        error: "Error while reading file."
      });
    }
    if (!(((ref = req.params) != null ? (ref1 = ref.ip) != null ? ref1.length : void 0 : void 0) > 0)) {
      return res.status(400).json({
        error: "No IP to remove."
      });
    }
    ref2 = file.data[datakey];
    for (key = i = 0, len = ref2.length; i < len; key = ++i) {
      value = ref2[key];
      if (value.endpoint === req.params.ip) {
        index = key;
        break;
      }
    }
    console.log("[API] - DELETE -", req.headers['x-forwarded-for'] || req.connection.remoteAddress, "-", req.params.ip);
    if (index == null) {
      return res.status(404).json({
        error: "No such IP found!"
      });
    }
    timestamp = Date.now();
    file.data[datakey].splice(index, 1);
    return file.save().then((function() {
      console.log("[API] - DELETE - Success", datakey, req.params.ip);
      compileTemplate(file.data);
      return res.json(file.data[datakey]);
    }), function(err) {
      console.log("[API] - DELETE - Error", err);
      return res.status(500).json({
        error: "Error while saving file"
      });
    });
  });
});

app.use('/', router);

server = app.listen(port, function() {
  var host;
  host = server.address().address;
  port = server.address().port;
  return console.log("[API] - INIT - [", app.settings.env, "]", "http://", host, ":", port);
});
